import Head from 'next/head'
import {getSession, signOut, useSession} from 'next-auth/react'
import Image from 'next/image'
import Header from '../components/Header'
import Sidebar from '../components/Sidebar'
import Feed from '../components/Feed'
import { useRouter } from 'next/router'
import { AnimatePresence } from 'framer-motion'
import Modal from '../components/Model'
import { useRecoilState } from 'recoil'
import { modalState, modalTypeState } from '../atoms/modalAtom'
export default function Home() {
  const [modalOpen, setModalOpen] = useRecoilState(modalState);
  const [modalType, setModalType] = useRecoilState(modalTypeState);
  const router=useRouter();
  const {status}=useSession({
    required:true,
    onUnauthenticated(){
      router.push("/");
    }
  });

  if (status === "loading") {
    return "Loading or not authenticated..."
  }
   return (
    <div className='bg-[#F3F2EF] dark:bg-black dark:text-white h-screen overflow-y-scroll md:space-y-6'>
      <Head>
        <title>
          Feed | linkedin-clone
        </title>
        <meta name='description'content='Generated by michael Andom'/>
     <link rel="icon" href="/favicon.ico" />
      </Head>
      
      <Header />
      <main className='flex justify-center gap-x-5  px-4 sm:px-12'>
        <div className='flex flex-col md:flex-row gap-5'>
          {/* side bar */}
          <Sidebar />
          {/* feed */}
          <Feed />

        </div>
        <div>
          {/* widget  */}
        </div>

        <AnimatePresence>
          {modalOpen && (
            <Modal handleClose={() => setModalOpen(false)} type={modalType} />
          )}
        </AnimatePresence>
      </main>
      <button onClick={signOut}>signOut</button>
    </div>
  )
}

export async function getServerSideProps(context){
   // Check if the user is authenticated on the server...
   const session = await getSession(context);
   if (!session) {
     return {
       redirect: {
         permanent: false,
         destination: "/home",
       },
     };
   }

 return {
   props:{
     session,
   }
 }
}